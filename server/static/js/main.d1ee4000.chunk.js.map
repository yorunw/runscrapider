{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Sider","Content","Footer","App","state","collapsed","toggle","_this","setState","react_default","a","createElement","layout","style","minHeight","trigger","collapsible","this","collapsedWidth","className","menu","theme","mode","defaultSelectedKeys","Item","key","icon","type","background","padding","onClick","margin","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAKOA,sBAAQC,YAAOC,cAASC,aA2DhBC,6MAxDXC,MAAQ,CACJC,WAAW,KAGfC,OAAS,WACLC,EAAKC,SAAS,CACVH,WAAYE,EAAKH,MAAMC,qFAK3B,OACII,EAAAC,EAAAC,cAAAC,EAAA,GAAQC,MAAO,CAAEC,UAAW,UACxBL,EAAAC,EAAAC,cAACX,EAAD,CACIe,QAAS,KACTC,aAAW,EACXX,UAAWY,KAAKb,MAAMC,UACtBa,eAAe,KAEfT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,SACfV,EAAAC,EAAAC,cAAAS,EAAA,GAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACnDd,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMC,KAAK,SACXlB,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMC,KAAK,iBACXlB,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMC,KAAK,WACXlB,EAAAC,EAAAC,cAAA,wBAIZF,EAAAC,EAAAC,cAAAC,EAAA,OACIH,EAAAC,EAAAC,cAACZ,EAAD,CAAQc,MAAO,CAACe,WAAY,OAAQC,QAAS,IACzCpB,EAAAC,EAAAC,cAAAe,EAAA,GACIP,UAAU,UACVQ,KAAMV,KAAKb,MAAMC,UAAY,cAAgB,YAC7CyB,QAASb,KAAKX,UAGtBG,EAAAC,EAAAC,cAACV,EAAD,CAASY,MAAO,CAACkB,OAAQ,YAAaF,QAAS,GAAID,WAAY,OAAQd,UAAW,MAAlF,WAGAL,EAAAC,EAAAC,cAACT,EAAD,CAAQW,MAAO,CAACmB,UAAW,WAA3B,mDA/CFC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1ee4000.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport {Layout, Menu, Icon} from 'antd';\nimport './App.css';\n\nconst {Header, Sider, Content, Footer} = Layout;\n\nclass App extends Component {\n    state = {\n        collapsed: false,\n    };\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        });\n    };\n\n    render() {\n        return (\n            <Layout style={{ minHeight: '100vh' }}>\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    collapsedWidth='0'\n                >\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                        <Menu.Item key=\"1\">\n                            <Icon type=\"user\"/>\n                            <span>nav 1</span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Icon type=\"video-camera\"/>\n                            <span>nav 2</span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Icon type=\"upload\"/>\n                            <span>nav 3</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}>\n                        <Icon\n                            className=\"trigger\"\n                            type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                            onClick={this.toggle}\n                        />\n                    </Header>\n                    <Content style={{margin: '24px 16px', padding: 24, background: '#fff', minHeight: 280}}>\n                        Content\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n                        Ant Design Â©2018 Created by Ant UED\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}